const {ChatOpenAI} = require("@langchain/openai");
const {
  SystemMessagePromptTemplate,
  HumanMessagePromptTemplate,
  ChatPromptTemplate,
} = require("@langchain/core/prompts");
const {LLMChain} = require("langchain/chains");
const {OPENAI_API_KEY} = require("./config");
/**
 * Class representing an OpenAi instance for stock analysis.
 */
class OpenAi {
  /**
   * Create an OpenAi instance.
   * @param {string} stock - The stock ticker.
   * @param {number} annualizedReturn - The annualized return.
   * @param {number} sharpeRatio - The sharpe ratio.
   * @param {number} maxDrawdown - The max drawdown.
   * @param {number} calmarRatio - The calmar ratio.
   * @param {string} conclusion - The conclusion.
   * @param {number} twitterSentiment - The twitter sentiment.
   * @param {number} redditSentiment - The reddit sentiment.
   * @param {number} newsSentiment - The news sentiment.
    */
  constructor(
      stock,
      annualizedReturn,
      sharpeRatio,
      maxDrawdown,
      calmarRatio,
      conclusion,
      twitterSentiment,
      redditSentiment,
      newsSentiment,
  ) {
    this.stock = stock;
    this.annualizedReturn = annualizedReturn;
    this.sharpeRatio = sharpeRatio;
    this.maxDrawdown = maxDrawdown;
    this.calmarRatio = calmarRatio;
    this.conclusion = conclusion;
    this.twitterSentiment = twitterSentiment;
    this.redditSentiment = redditSentiment;
    this.newsSentiment = newsSentiment;
  }

  /**
   * Run the OpenAi instance.
   * @return {Promise} The result of the OpenAI model.
   * @async
    */
  async run() {
    const model = new ChatOpenAI({
      temperature: 0.9,
      modelName: "gpt-3.5-turbo",
      apiKey: OPENAI_API_KEY,
    });


    const systemMessage = ` 
                Analytical Report on Stock Analysis:

                The task is to generate a comprehensive analytical
                 report on a specific 
                stock based on given criteria. Provide insights into
                 the stock's performance, 
                financial health, and potential future trends. Consider
                 the following factors:
                1. Historical stock performance, the stock's performance
                 over the past 5 years,
                 and the stock's performance compared to the market, the
                  stock will be given 
                 in the input as a stock ticker.
                2. Financial indicators (e.g., revenue, profit margin, etc.)
                , will be givne in 
                the input as calmar ratio, sharpe ratio, max drawdown,
                 annualized return.
                3. Recent news and events affecting the stock, given by the user
                 in the input
                 as sentiment analysis via news, reddit , and twitter.
                4. Analyst recommendations.
                5. Any emerging trends in the industry.
                6. Do not mention that u are a robot and that the report is
                 generated by AI.
                7. End the report with a conclusion and recommendation, which 
                will be given by
                 the user as input.
                8. A Warning message to the user and that the report is not 
                financialadvice an
                d should not be used at one's own risk and we are not 
                responsible for any losses.

                Ensure the report is well-organized and covers both 
                quantitative and qualitative
                 aspects. Use clear language and present the information in a
                 format suitable for analysis.
                  

                The user input will be given in the following format:
                stock ticker: {stock ticker}
                results from calmar ratio: {this.calmarRatio},
                results from sharpe ratio: {this.sharpeRatio},
                results from max drawdown: {this.maxDrawdown},
                results from annualized return: {this.annualizedReturn},
                results from news analysis: {this.newsSentiment}
                results from twitter analysis: {this.twitterSentiment}
                results from reddit analysis: {this.redditSentiment}
                Final Conclusion: {this.conclusion}
            `;
    const prompt = `
            stock ticker: ${this.stock}
            results from calmar ratio: ${this.calmarRatio},
            results from sharpe ratio: ${this.sharpeRatio},
            results from max drawdown: ${this.maxDrawdown},
            results from annualized return: ${this.annualizedReturn},
            results from news analysis: ${this.newsSentiment}
            results from twitter analysis: ${this.twitterSentiment}
            results from reddit analysis: ${this.redditSentiment}
            Final Conclusion: ${this.conclusion}
        `;
    const reportPrompt = ChatPromptTemplate.fromMessages([
      SystemMessagePromptTemplate.fromTemplate("{text}"),
      HumanMessagePromptTemplate.fromTemplate("{input}"),
    ]);
    const chain = new LLMChain({
      prompt: reportPrompt,
      llm: model,
    });
    const res = chain.call({
      text: systemMessage,
      input: prompt,
    });

    console.log(res);

    return res;
  }
}

module.exports = OpenAi;

